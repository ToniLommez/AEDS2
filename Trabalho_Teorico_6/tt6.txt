Marcos Antonio Lommez Candido Ribeiro
Trabalho Teorico 6

============================= UNIDADE 00i =============================

=======================================
-------------- PAGINA 70 -------------- 

    |----------------------------|
    |          Momento 1         |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   ????   |  c1  |    33h   |
    |----------|------|----------|
    |   ????   |  c2  |   null   |
    |----------|------|----------|
    |   ????   |  c3  |    51h   |
    |----------|------|----------|
    |    33h   |      |  1 / aa  |
    |----------|------|----------|
    |    51h   |      |  2 / bb  |
    |----------------------------|

    |----------------------------|
    |          Momento 2         |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   ????   |  c1  |    33h   |
    |----------|------|----------|
    |   ????   |  c2  |    62j   |
    |----------|------|----------|
    |   ????   |  c3  |    51h   |
    |----------|------|----------|
    |    33h   |      |  1 / aa  |
    |----------|------|----------|
    |    51h   |      |  2 / bb  |
    |----------|------|----------|
    |    62h   |      |  1 / aa  |
    |----------------------------|

=======================================
-------------- PAGINA 83 -------------- 

    |----------------------------|
    |          Momento 1         |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   ????   |  c1  |   null   |
    |----------|------|----------|
    |   ????   |  c2  |   null   |
    |----------|------|----------|
    |   ????   |  c3  |   null   |
    |----------------------------|

    |----------------------------|
    |          Momento 2         |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   ????   |  c1  |    7ah   |
    |----------|------|----------|
    |   ????   |  c2  |    9ah   |
    |----------|------|----------|
    |   ????   |  c3  |    a5h   |
    |----------|------|----------|
    |    7ah   |      |   ????   |
    |----------|------|----------|
    |    9ah   |      |   ????   |
    |----------|------|----------|
    |    a5h   |      |   ????   |
    |----------------------------|

    |----------------------------|
    |          Momento 3         |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   ????   |  c1  |    7ah   |
    |----------|------|----------|
    |   ????   |  c2  |    9ah   |
    |----------|------|----------|
    |   ????   |  c3  |    a5h   |
    |----------|------|----------|
    |    7ah   |      |  1 / aa  |
    |----------|------|----------|
    |    9ah   |      |  3 / aa  |
    |----------|------|----------|
    |    a5h   |      |  2 / bb  |
    |----------------------------|

=======================================
-------------- PAGINA 86 --------------

    • Um estudante de Algoritmos e Estruturas de Dados (em JAVA) implementou uma
    classe Hora, cujo construtor recebe e armazena uma hora, minuto e segundo. O que
    acontece se a classe X abaixo for colocada na mesma pasta que a classe Hora?
    -------------------------
    class X {
        public static void main (String[] args){
            Hora h1 = new Hora(12, 30, 30);
            Hora h2 = new Hora(12, 30, 30);
            if (h1 == h2)
                System.out.println(“Identicos!”);
            else
                System.out.println(“Diferentes!”);
        }
    }
    -------------------------

    O resultado sera "Diferente" porque a comparacao que esta sendo feita
    e uma comparacao de ponteiros e nao uma comparacao de conteudo 


============================= UNIDADE 00m =============================

=======================================
-------------- PAGINA 70 --------------

    Faça o quadro de memória e mostre a saída na tela:
    ----------------------------
    int *x1; int x2; int *x3;
    x1 = (int *) malloc (sizeof(int));
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    *x1 = 20;
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    x2 = *x1;
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    *x3 = x2 * *x1;
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    x3 = &x2;
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    x2 = 15;
    printf(“\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)”, x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    ----------------------------

    No codigo proposto a variavel x3 nao foi inicializada, entao tomei
    a liberdade de deduzir que foi um erro e incializa-la

    int *x1;
    int x2;
    int *x3;
    x1 = (int*)malloc(sizeof(int));
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCC8   |
    |----------|------|----------|
    |   FCD4   |  x2  |    00    |
    |----------|------|----------|
    |   FCC8   |      |   lixo   |
    |----------|------|----------|
    |   FCD8   |      |   lixo   |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA-------------------------|
    |x1(A5A0)(lixo)(FCD8) x2(0)(FCD4) x3(lixo)(lixo)(FCC8)|
    |-----------------------------------------------------|

    *x1 = 20;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCC8   |
    |----------|------|----------|
    |   FCD4   |  x2  |    00    |
    |----------|------|----------|
    |   FCC8   |      |   lixo   |
    |----------|------|----------|
    |   FCD8   |      |    20    |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA-------------------------|
    | x1(A5A0)(20)(FCD8) x2(0)(FCD4) x3(lixo)(lixo)(FCC8) |
    |-----------------------------------------------------|

    x2 = *x1;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCC8   |
    |----------|------|----------|
    |   FCD4   |  x2  |    20    |
    |----------|------|----------|
    |   FCC8   |      |   lixo   |
    |----------|------|----------|
    |   FCD8   |      |    20    |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA--------------------------|
    | x1(A5A0)(20)(FCD8) x2(20)(FCD4) x3(lixo)(lixo)(FCC8) |
    |------------------------------------------------------|

    *x3 = x2 * *x1;  // o conteudo de x2 multiplicado pelo conteudo do ponteiro de x1
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCC8   |
    |----------|------|----------|
    |   FCD4   |  x2  |    20    |
    |----------|------|----------|
    |   FCC8   |      |   0400   |
    |----------|------|----------|
    |   FCD8   |      |    20    |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA-------------------------|
    | x1(A5A0)(20)(FCD8) x2(20)(FCD4) x3(lixo)(400)(FCC8) |
    |-----------------------------------------------------|

    x3 = &x2;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCD4   |
    |----------|------|----------|
    |   FCD4   |  x2  |    20    |
    |----------|------|----------|
    |   FCC8   |      |   0400   |
    |----------|------|----------|
    |   FCD8   |      |    20    |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA------------------------|
    | x1(A5A0)(20)(FCD8) x2(20)(FCD4) x3(lixo)(20)(FCC8) |
    |----------------------------------------------------|

    x2 = 15;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   FCD8   |
    |----------|------|----------|
    |   A4F0   | *x3  |   FCD4   |
    |----------|------|----------|
    |   FCD4   |  x2  |    15    |
    |----------|------|----------|
    |   FCC8   |      |   0400   |
    |----------|------|----------|
    |   FCD8   |      |    20    |
    |----------------------------|

    printf("\nx1(%p)(%i)(%p) x2(%i)(%p) x3(%p)(%i)(%p)", x1, *x1, &x1, x2, &x2, x3, *x3, &x3);
    |------------------------TELA------------------------|
    | x1(A5A0)(20)(FCD8) x2(15)(FCD4) x3(lixo)(15)(FCC8) |
    |----------------------------------------------------|

=======================================
-------------- PAGINA 71 --------------

    Faça o quadro de memória:
    ----------------------------
    double M [3][3];
    double *p = M[0];
    for (int i = 0; i < pow(MAXTAM, 2); i++, p++){
        *p=0.0;
    }
    ----------------------------

    double M [3][3];
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   |  M   |   lixo   |
    |----------|------|----------|

    double *p = M[0];
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   |  M   |   lixo   |
    |----------|------|----------|
    |   A6B3   |  *p  |   A5A0   |
    |----------|------|----------|

    for (int i = 0; i < pow(MAXTAM, 2); i++, p++){
        *p=0.0;
    }
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   |  M   |   0000   |
    |----------|------|----------|
    |   A6B3   |  *p  |   A6B3   |
    |----------|------|----------|

=======================================
-------------- PAGINA 79 --------------

    Faca o quadro de memoria:
    ----------------------------
    Cliente registro;
    Cliente* ponteiro = (Cliente*) malloc (sizeof(Cliente));
    registro.codigo = 1;
    strcpy(registro.nome, “AA”);
    printf(“\nFuncionario (%i): %s”, registro.codigo, registro.nome);
    ponteiro->codigo = 2;
    strcpy(ponteiro->nome, “BB”);
    printf(“\nFuncionario (%i): %s”, ponteiro->codigo, ponteiro->nome);
    ----------------------------

    Cliente registro;
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |----------|------------|----------|
    |   ????   |  r.codigo  |   lixo   | // estou abreviando registro para r.
    |----------|------------|----------| // para o quadro nao ficar muito largo
    |   ????   |  r.nome    |   lixo   |
    |----------------------------------|

    Cliente* ponteiro = (Cliente*) malloc (sizeof(Cliente));
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |   ????   |  r.codigo  |   lixo   |
    |----------|------------|----------|
    |   ????   |  r.nome    |   lixo   | // ponteiro abreviado para p
    |----------|------------|----------|
    |   ????   |  ponteiro  |    99a   |
    |----------|------------|----------|
    |   ????   |  p.codigo  |   lixo   |
    |----------|------------|----------|
    |   ????   |  p.nome    |   lixo   |
    |----------------------------------|

    registro.codigo = 1;
    strcpy(registro.nome, “AA”);
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |   ????   |  r.codigo  |      1   |
    |----------|------------|----------|
    |   ????   |  r.nome    |     AA   |
    |----------|------------|----------|
    |   ????   |  ponteiro  |    99a   |
    |----------|------------|----------|
    |    99a   |  p.codigo  |   lixo   |
    |----------|------------|----------|
    |    99b   |  p.nome    |   lixo   |
    |----------------------------------|

    printf(“\nFuncionario (%i): %s”, registro.codigo, registro.nome);
    |----------------------------------|
    |               Tela               |
    |----------------------------------|
    |        Funcionario (1): AA       |
    |----------------------------------|

    ponteiro->codigo = 2;
    strcpy(ponteiro->nome, “BB”);
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |   ????   |  r.codigo  |      1   |
    |----------|------------|----------|
    |   ????   |  r.nome    |     AA   |
    |----------|------------|----------|
    |   ????   |  ponteiro  |    99a   |
    |----------|------------|----------|
    |    99a   |  p.codigo  |      2   |
    |----------|------------|----------|
    |    99b   |  p.nome    |     BB   |
    |----------------------------------|

    printf(“\nFuncionario (%i): %s”, ponteiro->codigo, ponteiro->nome);
    |----------------------------------|
    |               Tela               |
    |----------------------------------|
    |        Funcionario (1): AA       |
    |        Funcionario (2): BB       |
    |----------------------------------|

=======================================
-------------- PAGINA 81 --------------

    • Mostre a saída na tela
    ----------------------------

    double a;
    double *p, *q;
    a = 3.14;
    printf(“%f\n”, a);
    p = &a;
    *p = 2.718;
    printf(“%f\n”, a);
    a = 5;
    printf(“%f\n”, *p);
    p = NULL;
    p = (double*) malloc(sizeof(double));
    *p = 20;
    q = p;
    printf(“%f\n”, *p);
    printf(“%f\n”, a);
    free(p);
    printf(“%f\n”, *q);

    ----------------------------

    saida:
    3.140000
    2.718000
    5.000000
    20.000000
    5.000000
    0.000000

=======================================
-------------- PAGINA 82 --------------

    Mostre o quadro de memória
    ----------------------------
    int a[10], *b;
    b = a;
    b[5] = 100;
    printf(“\n%d -- %d”, a[5], b[5]);

    b = (int*) malloc(10*sizeof(int));
    b[7] = 100;
    printf(“\n%d -- %d”, a[7], b[7]);
    ----------------------------


    int a[10], *b;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | a[0] |   lixo   |
    |   A5A8   | a[1] |   lixo   |
    |   A5B0   | a[2] |   lixo   |
    |   A5B8   | a[3] |   lixo   |
    |   A5C0   | a[4] |   lixo   |
    |   A5C8   | a[5] |   lixo   |
    |   A5D0   | a[6] |   lixo   |
    |   A5D8   | a[7] |   lixo   |
    |   A5E0   | a[8] |   lixo   |
    |   A5E8   | a[9] |   lixo   |
    |----------|------|----------|
    |   CE80   |  *b  |   lixo   |
    |----------|------|----------|

    b = a;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | a[0] |   lixo   |
    |   A5A8   | a[1] |   lixo   |
    |   A5B0   | a[2] |   lixo   |
    |   A5B8   | a[3] |   lixo   |
    |   A5C0   | a[4] |   lixo   |
    |   A5C8   | a[5] |   lixo   |
    |   A5D0   | a[6] |   lixo   |
    |   A5D8   | a[7] |   lixo   |
    |   A5E0   | a[8] |   lixo   |
    |   A5E8   | a[9] |   lixo   |
    |----------|------|----------|
    |   CE80   |  *b  |   A5A0   |
    |----------|------|----------|

    b[5] = 100;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | a[0] |   lixo   |
    |   A5A8   | a[1] |   lixo   |
    |   A5B0   | a[2] |   lixo   |
    |   A5B8   | a[3] |   lixo   |
    |   A5C0   | a[4] |   lixo   |
    |   A5C8   | a[5] |   100    |
    |   A5D0   | a[6] |   lixo   |
    |   A5D8   | a[7] |   lixo   |
    |   A5E0   | a[8] |   lixo   |
    |   A5E8   | a[9] |   lixo   |
    |----------|------|----------|
    |   CE80   |  *b  |   A5A0   |
    |----------|------|----------|

    printf(“\n%d -- %d”, a[5], b[5]);
    |----TELA----|
    | 100 -- 100 |
    |------------|

    b = (int*) malloc(10*sizeof(int));
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | a[0] |   lixo   |
    |   A5A8   | a[1] |   lixo   |
    |   A5B0   | a[2] |   lixo   |
    |   A5B8   | a[3] |   lixo   |
    |   A5C0   | a[4] |   lixo   |
    |   A5C8   | a[5] |   100    |
    |   A5D0   | a[6] |   lixo   |
    |   A5D8   | a[7] |   lixo   |
    |   A5E0   | a[8] |   lixo   |
    |   A5E8   | a[9] |   lixo   |
    |----------|------|----------|
    |   CE80   |  *b  |   C9D0   |
    |   C9D0   |      |   lixo   |
    |   C9D8   |      |   lixo   |
    |   C9E0   |      |   lixo   |
    |   C9E8   |      |   lixo   |
    |   C9F0   |      |   lixo   |
    |   C9F8   |      |   lixo   |
    |   CA00   |      |   lixo   |
    |   CA08   |      |   lixo   |
    |   CA10   |      |   lixo   |
    |   CA18   |      |   lixo   |
    |----------|------|----------|

    b[7] = 100;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | a[0] |   lixo   |
    |   A5A8   | a[1] |   lixo   |
    |   A5B0   | a[2] |   lixo   |
    |   A5B8   | a[3] |   lixo   |
    |   A5C0   | a[4] |   lixo   |
    |   A5C8   | a[5] |   100    |
    |   A5D0   | a[6] |   lixo   |
    |   A5D8   | a[7] |   lixo   |
    |   A5E0   | a[8] |   lixo   |
    |   A5E8   | a[9] |   lixo   |
    |----------|------|----------|
    |   CE80   |  *b  |   C9D0   |
    |   C9D0   |      |   lixo   |
    |   C9D8   |      |   lixo   |
    |   C9E0   |      |   lixo   |
    |   C9E8   |      |   lixo   |
    |   C9F0   |      |   lixo   |
    |   C9F8   |      |   lixo   |
    |   CA00   |      |   100    |
    |   CA08   |      |   lixo   |
    |   CA10   |      |   lixo   |
    |   CA18   |      |   lixo   |
    |----------|------|----------|

    printf(“\n%d -- %d”, a[7], b[7]);
    |-----TELA----|
    | lixo -- 100 |
    |-------------|

=======================================
-------------- PAGINA 83 --------------

    Mostre o quadro de memória
    ----------------------------
    int *x1; int x2; int *x3;
    x1 = (int*) malloc(sizeof(int));
    *x1 = 20;
    x2 = *x1;
    *x3 = x2 * *x1;
    x3 = &x2;
    x2 = 15;
    x2 = 13 & 3;
    x2 = 13 | 3;
    x2 = 13 >> 1;
    x2 = 13 << 1;
    ----------------------------

    int *x1; int x2; int *x3;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   lixo   |
    |----------|------|----------|
    |   CE80   |  x2  |   lixo   |
    |----------|------|----------|
    |   DF50   | *x3  |   lixo   |
    |----------|------|----------|

    x1 = (int*) malloc(sizeof(int));
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   lixo   |
    |----------|------|----------|
    |   DF50   | *x3  |   lixo   |
    |----------|------|----------|
    |   AA00   |      |   lixo   |
    |----------|------|----------|

    *x1 = 20;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   lixo   |
    |----------|------|----------|
    |   DF50   | *x3  |   lixo   |
    |----------|------|----------|
    |   AA00   |      |    20    |
    |----------|------|----------|

    x2 = *x1;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |    20    |
    |----------|------|----------|
    |   DF50   | *x3  |   lixo   |
    |----------|------|----------|
    |   AA00   |      |    20    |
    |----------|------|----------|

    *x3 = x2 * *x1;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   20     |
    |----------|------|----------|
    |   DF50   | *x3  |   AA08   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x3 = &x2;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   20     |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x2 = 15;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   15     |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x2 = 13 & 3;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   1      |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x2 = 13 | 3;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   1      |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x2 = 13 >> 1;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   6      |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

    x2 = 13 << 1;
    |----------------------------|
    |           Memoria          |
    |----------------------------|
    | endereco | nome | conteudo |
    |----------|------|----------|
    |   A5A0   | *x1  |   AA00   |
    |----------|------|----------|
    |   CE80   |  x2  |   26     |
    |----------|------|----------|
    |   DF50   | *x3  |   CE80   |
    |----------|------|----------|
    |   AA00   |      |   20     |
    |----------|------|----------|
    |   AA08   |      |   400    |
    |----------|------|----------|

=======================================
-------------- PAGINA 84 --------------

    Cliente c;
    c.codigo = 5;
    |----------------------------------|
    |              Memoria             |
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |   ????   |  c.codigo  |      5   |
    |----------------------------------|

    Cliente *p = NULL;
    p = (Cliente*) malloc (sizeof(Cliente));
    |----------------------------------|
    |              Memoria             |
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |    01a   |  c.codigo  |      5   |
    |----------|------------|----------|
    |   ????   |      p     |    11h   |
    |----------|------------|----------|
    |    11h   |  p.codigo  |   lixo   |
    |----------------------------------|

    p->codigo = 6;
    |----------------------------------|
    |              Memoria             |
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |    01a   |  c.codigo  |      5   |
    |----------|------------|----------|
    |   ????   |      p     |    11h   |
    |----------|------------|----------|
    |    11h   |  p.codigo  |      6   |
    |----------------------------------|

    Cliente *p2 = &c;
    |----------------------------------|
    |              Memoria             |
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |    01a   |  c.codigo  |      5   |
    |----------|------------|----------|
    |   ????   |      p     |    11h   |
    |----------|------------|----------|
    |    11h   |  p.codigo  |      6   |
    |----------|------------|----------|
    |   ????   |     p2     |    01a   |
    |----------------------------------|

    p2->codigo = 7;
    |----------------------------------|
    |              Memoria             |
    |----------------------------------|
    | endereco |    nome    | conteudo |
    |----------|------------|----------|
    |    01a   |  c.codigo  |      7   |
    |----------|------------|----------|
    |   ????   |      p     |    11h   |
    |----------|------------|----------|
    |    11h   |  p.codigo  |      6   |
    |----------|------------|----------|
    |   ????   |     p2     |    01a   |
    |----------------------------------|

=======================================
-------------- PAGINA 97 --------------

    • Represente graficamente o código Java abaixo
        ---------------------------- 
        • Elemento e1;

         e1
         --> ?

        • Elemento e1 = new Elemento();

         e1 |-----|
         -->|     |
            |-----|

        • Elemento[] e2 = new Elemento [3];

         e1 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
               ?     ?     ?

        • Elemento[] e2 = new Elemento [3];
        • for (int i = 0; i < 3; i ++){
        •     e2[i] = new Elemento();
        • }

         e1 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
             |---| |---| |---|
             |   | |   | |   |
             |---| |---| |---|

    • Represente graficamente o código C abaixo
        ---------------------------- 
        • Elemento e1;

         e1 |-----|
            |     |
            |-----|

        • Elemento* e2;

         e2  
         --> ?

        • Elemento* e2 = (Elemento*) malloc(sizeof(Elemento));

         e2 |-----|
         -->|     |
            |-----|

        • Elemento* e2 = (Elemento*) malloc(3*sizeof(Elemento));

         e2 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|

        • Elemento e3[3];

            |-----|-----|-----|
         e3 |     |     |     |
            |-----|-----|-----|

        • Elemento** e4;

         e4 
         --> ?

        • Elemento** e4 = (Elemento**) malloc(3*sizeof(Elemento*));

         e4 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
               ?     ?     ?

        • Elemento** e4 = (Elemento**) malloc(3*sizeof(Elemento*));
        • e4[0] = (Elemento*) malloc(sizeof(Elemento*));
        • e4[2] = (Elemento*) malloc(sizeof(Elemento*));

         e4 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
             |---|       |---|
             |   |   ?   |   |
             |---|       |---|

    • Represente graficamente o código C++ abaixo
        ---------------------------- 
        • Elemento e1;

         e1 |-----|
            |     |
            |-----|

        • Elemento* e2;

         e2  
         --> ?

        • Elemento* e2 = new Elemento;

         e2 |-----|
         -->|     |
            |-----|

        • Elemento* e2 = new Elemento[3];

         e2 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|

        • Elemento e3[3];

            |-----|-----|-----|
         e3 |     |     |     |
            |-----|-----|-----|

        • Elemento** e4;

        e4 
        --> ?

        • Elemento** e4 = new Elemento*[3];

         e4 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
               ?     ?     ?

        • Elemento** e4 = new Elemento*[3];
        • e4[0] = new Elemento;
        • e4[2] = new Elemento;

         e4 |-----|-----|-----|
         -->|     |     |     |
            |-----|-----|-----|
               |     |     |
               V     V     V
             |---|       |---|
             |   |   ?   |   |
             |---|       |---|
